str(covid_vacc_data)
library(dplyr)
# Filter the data for Flanders
flanders_vaccine_data <- covid_vacc_data %>%
filter(REGION == "Flanders")
# Calculate the total number of vaccines given for each brand
total_vaccines_by_brand <- flanders_vaccine_data %>%
group_by(BRAND) %>%
summarise(total_vaccines = sum(VACCINES))
View(covid_vacc_data)
View(covid_tests_data)
View(covid_vacc_data)
library(dplyr)
# Filter the data for Flanders
flanders_vaccine_data <- covid_vacc_data %>%
filter(REGION == "Flanders")
# Calculate the total number of vaccines given for each brand
total_vaccines_by_brand <- flanders_vaccine_data %>%
group_by(BRAND) %>%
summarise(total_vaccines = sum(COUNT))
# Print or view the result
print(total_vaccines_by_brand)
library(dplyr)
# Filter the data for Flanders
flanders_vaccine_data <- covid_vacc_data %>%
filter(REGION == "Flanders")
# Calculate the total number of vaccines given for each brand and dose
total_vaccines_by_brand_and_dose <- flanders_vaccine_data %>%
group_by(BRAND, DOSE) %>%
summarise(total_vaccines = sum(COUNT))
# Print or view the result
print(total_vaccines_by_brand_and_dose)
library(dplyr)
# Calculate the total vaccines given for each date
total_vaccines_by_date <- covid_vacc_data %>%
group_by(DATE) %>%
summarise(total_vaccines = sum(COUNT))
# Find the date with the highest total vaccines
most_vaccines_date <- total_vaccines_by_date %>%
filter(total_vaccines == max(total_vaccines))
# Print or view the result
print(most_vaccines_date)
library(dplyr)
library(ggplot2)
# Calculate the cumulative sum of doses per brand over time
cumulative_vaccines_by_brand <- covid_vacc_data %>%
group_by(DATE, BRAND) %>%
summarise(cumulative_doses = cumsum(COUNT))
# Create the line graph
ggplot(cumulative_vaccines_by_brand, aes(x = DATE, y = cumulative_doses, color = BRAND)) +
geom_line() +
theme_minimal() +
labs(title = "Cumulative Number of Vaccines Given Over Time",
x = "Date",
y = "Cumulative Doses",
color = "Brand") +
scale_color_manual(values = c("red", "blue", "green", "purple"))  # Customize colors if needed
library(dplyr)
library(ggplot2)
# Calculate the cumulative sum of doses per brand over time
cumulative_vaccines_by_brand <- covid_vacc_data %>%
group_by(DATE, BRAND) %>%
summarise(cumulative_doses = cumsum(COUNT))
# Create the line graph
ggplot(cumulative_vaccines_by_brand, aes(x = DATE, y = cumulative_doses, color = BRAND)) +
geom_line() +
theme_minimal() +
labs(title = "Cumulative Number of Vaccines Given Over Time",
x = "Date",
y = "Cumulative Doses",
color = "Brand") +
scale_color_manual(values = c("red", "blue", "green", "purple","yellow"))  # Customize colors if needed
library(dplyr)
library(ggplot2)
# Filter the data for Flanders
flanders_vaccine_data <- covid_vacc_data %>%
filter(REGION == "Flanders")
# Calculate the total doses per brand and age group
total_doses_by_brand_age <- flanders_vaccine_data %>%
group_by(AGEGROUP, BRAND) %>%
summarise(total_doses = sum(COUNT))
# Calculate the percentage of doses per brand within each age group
total_doses_by_brand_age <- total_doses_by_brand_age %>%
group_by(AGEGROUP) %>%
mutate(percentage = (total_doses / sum(total_doses)) * 100)
# Create the stacked bar plot
ggplot(total_doses_by_brand_age, aes(x = AGEGROUP, y = percentage, fill = BRAND)) +
geom_bar(stat = "identity") +
theme_classic() +
labs(title = "Percentage of Vaccine Doses by Brand per Age Group in Flanders",
x = "Age Group",
y = "Percentage of Doses",
fill = "Brand")
# Check if AstraZeneca is equally given in each age group
az_percentage_by_age <- total_doses_by_brand_age %>%
filter(BRAND == "AstraZeneca")
print(az_percentage_by_age)
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2020-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2019-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2022-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(total_doses))
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(DOSE))
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(doses_summary))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
View(covid_case_data)
View(covid_case_data_agegroup_wide)
View(covid_hospitalisations_data)
View(covid_mortality_data)
View(covid_tests_data)
View(covid_vacc_data)
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-08"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-09-06"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2022-09-06"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(dplyr)
library(ggplot2)
# Filter the Pfizer data in Flanders on 2021-06-09
pfizer_data <- covid_vacc_data %>%
filter(BRAND == "Pfizer-BioNTech", REGION == "Flanders", DATE == as.Date("2021-06-09"))
# Summarize the total doses per age group and sex
doses_summary <- pfizer_data %>%
group_by(AGEGROUP, SEX) %>%
summarise(total_vaccines = sum(COUNT))
# Create the dot plot
ggplot(doses_summary, aes(x = AGEGROUP, y = SEX, size = total_vaccines)) +
geom_point() +
theme_minimal() +
labs(title = "Total Pfizer Vaccines Given on 2021-06-09 in Flanders",
x = "Age Group",
y = "Sex",
size = "Total Vaccines Given")
library(lubridate)
covid_case_data %>%
#drop all na values
#get the week of the date with lubridate
#group by the week and regio and take the sum of the cases
#remove the grouping
#calculate the cumulative sum
#and plot weeks versus the cumulative sum with a smoother
ggplot(aes(x=WEEK, y = cumsumCASES, color = REGION))+
geom_point()+
geom_smooth(method = loess, se = FALSE)+
labs(title = "Cumulative sum of the cases", x = "week of the year", y = "cumulative cases")+
theme_classic()
View(covid_case_data)
library(lubridate)
covid_case_data %>%
#drop all na values
#get the week of the date with lubridate
#group by the week and regio and take the sum of the cases
#remove the grouping
#calculate the cumulative sum
#and plot weeks versus the cumulative sum with a smoother
ggplot(aes(x=WEEK, y = cumsumCASES, color = REGION))+
geom_point()+
geom_smooth(method = loess, se = FALSE)+
labs(title = "Cumulative sum of the cases", x = "week of the year", y = "cumulative cases")+
theme_classic()
#ibrary(lubridate)
#covid_case_data %>%
#drop all na values
#get the week of the date with lubridate
#group by the week and regio and take the sum of the cases
#remove the grouping
#calculate the cumulative sum
#and plot weeks versus the cumulative sum with a smoother
# ggplot(aes(x=WEEK, y = cumsumCASES, color = REGION))+
# geom_point()+
# geom_smooth(method = loess, se = FALSE)+
#  labs(title = "Cumulative sum of the cases", x = "week of the year", y = "cumulative cases")+
# theme_classic()
####
library(lubridate)
library(ggplot2)
covid_case_data %>%
drop_na() %>%
mutate(WEEK = week(DATE)) %>%
group_by(WEEK, REGION) %>%
summarise(cumsumCASES = sum(CASES) %>%
ungroup() %>%
mutate(cumsumCASES = cumsum(cumsumCASES)) %>%
ggplot(aes(x = WEEK, y = cumsumCASES, color = REGION)) +
geom_point() +
geom_smooth(method = loess, se = FALSE) +
labs(title = "Cumulative Sum of COVID-19 Cases",
x = "Week of the Year",
y = "Cumulative Cases") +
theme_classic()
library(lubridate)
covid_case_data %>%
#drop all na values
drop_na() %>%
#get the week of the date with lubridate
mutate(WEEK = week(DATE)) %>%
#group by the week and regio and take the sum of the cases
group_by(WEEK, REGION) %>%
summarise(cumsumCASES = sum(CASES)) %>%
#remove the grouping
ungroup() %>%
#calculate the cumulative sum
mutate(cumsumCASES = cumsum(cumsumCASES)) %>%
#and plot weeks versus the cumulative sum with a smoother
ggplot(aes(x=WEEK, y = cumsumCASES, color = REGION))+
geom_point()+
geom_smooth(method = loess, se = FALSE)+
labs(title = "Cumulative sum of the cases", x = "week of the year", y = "cumulative cases")+
theme_classic()
View(covid_hospitalisations_data)
####covid_hospitalisations_data %>%
# we want this number per province
# since we will calculate a difference between two following days, we first arrange per data
# we take the value of the next day with lead and calculate the difference with our date
# we only select the provinces in flanders
####ggplot(aes(x = DATE, y = difference_IN, fill = PROVINCE))+
# we want to plot the areas under the curve
#### geom_area()+
# plotting on top of each other is not visual enough, but since not all provinces have the same number of inhabitants, we loosen the y scale
####facet_wrap(~PROVINCE, scales= "free_y") +
####theme_classic()
###
covid_hospitalisations_data %>%
filter(REGION == "Flanders") %>%
arrange(DATE) %>%
group_by(PROVINCE) %>%
mutate(difference_IN = IN - lag(IN, default = first(IN))) %>%
ggplot(aes(x = DATE, y = difference_IN, fill = PROVINCE)) +
geom_area() +
facet_wrap(~PROVINCE, scales = "free_y") +
labs(title = "Differences in Hospitalised Patients Compared to the Previous Day",
x = "Date",
y = "Difference in Hospitalised Patients",
fill = "Province") +
theme_classic()
####covid_hospitalisations_data %>%
# we want this number per province
# since we will calculate a difference between two following days, we first arrange per data
# we take the value of the next day with lead and calculate the difference with our date
# we only select the provinces in flanders
####ggplot(aes(x = DATE, y = difference_IN, fill = PROVINCE))+
# we want to plot the areas under the curve
#### geom_area()+
# plotting on top of each other is not visual enough, but since not all provinces have the same number of inhabitants, we loosen the y scale
####facet_wrap(~PROVINCE, scales= "free_y") +
####theme_classic()
###
covid_hospitalisations_data %>%
filter(REGION == "Flanders") %>%
arrange(DATE) %>%
group_by(PROVINCE) %>%
mutate(difference_IN = IN - lag(IN, default = first(IN))) %>%
ggplot(aes(x = DATE, y = difference_IN, fill = REGION)) +
geom_area() +
facet_wrap(~PROVINCE, scales = "free_y") +
labs(title = "Differences in Hospitalised Patients Compared to the Previous Day",
x = "Date",
y = "Difference in Hospitalised Patients",
fill = "Province") +
theme_classic()
####covid_hospitalisations_data %>%
# we want this number per province
# since we will calculate a difference between two following days, we first arrange per data
# we take the value of the next day with lead and calculate the difference with our date
# we only select the provinces in flanders
####ggplot(aes(x = DATE, y = difference_IN, fill = PROVINCE))+
# we want to plot the areas under the curve
#### geom_area()+
# plotting on top of each other is not visual enough, but since not all provinces have the same number of inhabitants, we loosen the y scale
####facet_wrap(~PROVINCE, scales= "free_y") +
####theme_classic()
###
covid_hospitalisations_data %>%
filter(REGION == "Flanders") %>%
arrange(DATE) %>%
group_by(PROVINCE) %>%
mutate(difference_IN = TOTAL_IN - lag(TOTAL_IN, default = first(TOTAL_IN))) %>%
ggplot(aes(x = DATE, y = difference_IN, fill = PROVINCE)) +
geom_area() +
facet_wrap(~PROVINCE, scales = "free_y") +
labs(title = "Differences in Hospitalised Patients Compared to the Previous Day",
x = "Date",
y = "Difference in Hospitalised Patients",
fill = "Province") +
theme_classic()
covid_mortality_data %>%
group_by(DATE, AGEGROUP) %>%
summarise(DEATHS = sum(DEATHS)) %>%
ggplot(aes(x=DATE, y=DEATHS, fill=AGEGROUP))+
geom_bar(stat = "identity", position="stack") +
theme_classic()
#split by sex
covid_mortality_data %>%
group_by(DATE, AGEGROUP, SEX) %>%
summarise(DEATHS = sum(DEATHS)) %>%
drop_na() %>%
ggplot(aes(x=DATE, y=DEATHS, fill=AGEGROUP))+
geom_bar(stat = "identity", position="stack") +
facet_wrap(~SEX)+
theme_classic()
#plot to same but use area to make it look better > this gives weird lines for age groups for which people die sporadically
covid_mortality_data %>%
group_by(DATE, AGEGROUP, SEX) %>%
summarise(DEATHS = sum(DEATHS)) %>%
drop_na() %>%
ggplot(aes(x=DATE, y=DEATHS, fill=AGEGROUP))+
geom_area(stat="identity") +
facet_wrap(~SEX)+
theme_classic()
#thats why we will add zero values for those observations with "complete"
covid_mortality_data %>%
group_by(DATE, AGEGROUP, SEX) %>%
summarise(DEATHS = sum(DEATHS)) %>%
drop_na() %>%
ungroup() %>%
tidyr::complete(DATE, AGEGROUP, SEX, fill=list(DEATHS=0)) %>%
ggplot(aes(x=DATE, y=DEATHS, fill=AGEGROUP))+
geom_area(stat="identity") +
facet_wrap(~SEX)+
theme_classic()
