setwd("C:/Users/abdoj/OneDrive - UGent/Desktop/0. UGent-ABDO/1. J000530A -Data Intelligence in Sustainable Drug Discovery/5. Prof; De Preter - R practical sessions/2. Data visualisations")
library(tidyverse)
dir()
# Read the expression data from the TSV file
expression_data <- read_tsv("qPCR_expression_data.tsv")
# Read the sample data from the TSV file and specify data types
sample_data <- read_tsv("qPCR_sample_data.tsv", col_types = cols(
MNA = col_factor(levels = c("0", "1")),
Stage = col_factor(levels = c("1", "2", "3", "4", "5", "4S")),
event = col_factor(levels = c("0", "1")),
survival = col_factor(levels = c("0", "1"))
))
# Check the structure of the data frames
str(expression_data)
str(sample_data)
# expression data
head(expression_data)
tail(expression_data)
# sample data
head(sample_data)
tail(sample_data)
# Check the class of the original data frame/tibble
class(expression_data)
# Convert expression_data to a matrix
expression_data_matrix <- as.matrix(expression_data)
# Check the class of the converted matrix
class(expression_data_matrix)
# Display the first few rows of the matrix
head(expression_data_matrix)
ls()
expression_data_pergene <- expression_data %>%
pivot_longer(-genename) %>%
pivot_wider(names_from = "genename", values_from="value")
expression_data_pergene
group1 <- c(187, 177, 198, 176, 199)
group2 <- c(167, 176, 156, 166, 168)
t.test(group1,group2)
wilcox.test(group1, group2)
# Perform the Wilcoxon test and store the result in an object
result_wilc <- wilcox.test(group1, group2)
# Print the full result
result_wilc
# Access and print the p-value
result_wilc$p.value
# Create the vectors for length and group
length <- c(187, 177, 198, 176, 199, 167, 176, 156, 166, 168)
group <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2)
# Perform the parametric t-test using a formula
t.test(length ~ group)
# Perform the non-parametric Wilcoxon test using a formula
wilcox.test(length ~ group)
# this is the base-R way to draw a boxplot
boxplot(length~group)
#also with ggplot you can make nice boxplots
library(ggplot2)
inputdata <- tibble(length, group = as.factor(group))
inputdata %>%
ggplot(aes(x = group, y = length)) +
geom_boxplot() +
theme_classic()
#boxplot with jitter
inputdata <- tibble(length, group = as.factor(group))
inputdata %>%
ggplot(aes(x = group, y = length)) +
geom_boxplot() +
theme_classic() +
geom_jitter()
#Paired t-test (parametric):
t.test(group1, group2, paired=T) # parametric test
#Paired Wilcoxon test (non-parametric):
wilcox.test(group1, group2, paired=T) # non-parametric test
library(dplyr)
# Assuming expression_data_pergene is your data frame
#expression_data_pergene <- expression_data_pergene %>%
#rownames_to_column(var = "GeneName")
# Now the "GeneName" column will be the index, and you can access data using gene names
library(ggplot2)
ggplot(expression_data_pergene, aes(x = gene39)) +
geom_density() +
labs(title = "Density Plot for Gene39 Expression")
ggplot(expression_data_pergene, aes(x = gene46)) +
geom_density() +
labs(title = "Density Plot for Gene46 Expression")
# Perform an independent samples t-test
t_test_result <- t.test(expression_data_pergene$gene39, expression_data_pergene$gene46,  paired=T)
# Print the t-test result
t_test_result
# Perform the Mann-Whitney test
result <- wilcox.test(
x = expression_data_pergene$gene39,
y = expression_data_pergene$gene46,
paired=T)
# Display the test result
result
# Assuming expression_data_pergene is your gene expression data frame, and sample_data is your sample data frame
library(dplyr)
# Assuming "name" in expression_data_pergene and "patientID" in sample_data are the common columns
combined_data <- left_join(expression_data_pergene, sample_data, by = c("name" = "patientID"))
# Check the first few rows of the combined data
head(combined_data)
# Perform t-test for gene 14 (CD44)
t_test_cd44 <- t.test(gene14 ~ MNA, data = combined_data)
# Perform Mann-Whitney test for gene 14 (CD44)
wilcox_cd44 <- wilcox.test(gene14 ~ MNA, data = combined_data)
# Print the results
t_test_cd44
wilcox_cd44
# You can repeat the same steps for gene39 (MYCN) and gene45 (NTKR1)
# Perform t-test and Mann-Whitney test for gene 39 (MYCN)
t_test_mycn <- t.test(gene39 ~ MNA, data = combined_data)
wilcox_mycn <- wilcox.test(gene39 ~ MNA, data = combined_data)
# Print the results for gene 39
t_test_mycn
wilcox_mycn
# Perform t-test and Mann-Whitney test for gene 45 (NTKR1)
t_test_ntkr1 <- t.test(gene45 ~ MNA, data = combined_data)
wilcox_ntkr1 <- wilcox.test(gene45 ~ MNA, data = combined_data)
# Print the results for gene 45
t_test_ntkr1
wilcox_ntkr1
# Create a boxplot to visualize gene 14 (CD44) expression by MNA status
boxplot(gene14 ~ MNA, data = combined_data, main = "CD44 Expression by MYCN Amplification", xlab = "MYCN Amplification (0 = No, 1 = Yes)", ylab = "CD44 Expression")
# Perform t-test and Mann-Whitney test for gene 14 (CD44)
t_test_cd44 <- t.test(gene14 ~ MNA, data = combined_data)
wilcox_cd44 <- wilcox.test(gene14 ~ MNA, data = combined_data)
# Print the results for gene 14 (CD44)
t_test_cd44
wilcox_cd44
# Perform t-test and Mann-Whitney test for gene 39 (MYCN)
t_test_mycn <- t.test(gene39 ~ MNA, data = combined_data)
wilcox_mycn <- wilcox.test(gene39 ~ MNA, data = combined_data)
# Print the results for gene 39 (MYCN)
t_test_mycn
wilcox_mycn
# Perform t-test and Mann-Whitney test for gene 45 (NTKR1)
t_test_ntkr1 <- t.test(gene45 ~ MNA, data = combined_data)
wilcox_ntkr1 <- wilcox.test(gene45 ~ MNA, data = combined_data)
# Print the results for gene 45 (NTKR1)
t_test_ntkr1
wilcox_ntkr1
# Create a boxplot to visualize gene 14 (CD44) expression by MNA status
boxplot(gene14 ~ MNA, data = combined_data, main = "CD44 Expression by MYCN Amplification", xlab = "MYCN Amplification (0 = No, 1 = Yes)", ylab = "CD44 Expression")
# Assuming expression_data_pergene is your data frame
library(ggplot2)
# Create a scatter plot
ggplot(expression_data_pergene, aes(x = gene39, y = gene46)) +
geom_point() +
labs(x = "Gene 39 Expression", y = "Gene 46 Expression", title = "Scatter Plot of Gene 39 vs. Gene 46")
# Calculate Pearson and Spearman correlation coefficients
pearson_cor <- cor.test(expression_data_pergene$gene39, expression_data_pergene$gene46, method = "pearson")
spearman_cor <- cor.test(expression_data_pergene$gene39, expression_data_pergene$gene46, method = "spearman")
# Print the correlation coefficients and p-values
pearson_cor
spearman_cor
# Assuming combined_data is your combined data frame
# Parametric ANOVA test for gene39
parametric_anova <- anova(lm(gene39 ~ Stage, data = combined_data))
print("Parametric ANOVA:")
print(summary(parametric_anova))
# Non-parametric Kruskal-Wallis test for gene39
non_parametric_kruskal <- kruskal.test(gene39 ~ Stage, data = combined_data)
print("Non-Parametric Kruskal-Wallis:")
print(non_parametric_kruskal)
# Create a boxplot to visualize gene39 expression by Stage
library(ggplot2)
ggplot(combined_data, aes(x = Stage, y = gene39)) +
geom_boxplot() +
labs(x = "Stage", y = "Gene39 Expression", title = "Boxplot of Gene39 Expression by Stage")
# You can repeat the same steps for gene 14 (CD44) instead of gene39
