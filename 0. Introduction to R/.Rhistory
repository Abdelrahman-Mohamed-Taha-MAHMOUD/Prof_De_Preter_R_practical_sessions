print(vector1)
a <- 10
b <- 15
sum a = b
a <- 10
b <- 15
sum a + b
a <- 10
b <- 15
sum a + b
a <- 10
b <- 15
sum (a + b)
# run ls
ls()
# make new object
new_object <- "new"
# run ls
ls()
rm(list=ls())
ls()
vector2 <- c(1:10) #this command gives the same result as vector2=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(vector2)
#vector2 <- c(3, 2, 1)
print(vector2)
#the third line is a comment and does not change anything to object vector2
vector2 <- c(3, 2, 1)
print(vector2) #now vector2 is overwritten
Run this line. It will give an error message, as R cannot interpret this. It is not indicated to be a comment.
num <- 5
num
com <- 1 + 2i
com
cha1 <- "hello"
cha1
cha2 <- "4" #4 is not interpreted as number but as character!!!
cha2
6 > 5 # this command checks whether 6 is greater than 5
num1 <- 10
num2 <- 5
num1 < num2 # this command checks whether num1 is smaller then num2? --> result is logical value
lo <- num1 < num2 # logical value is assigned to the variable lo
print(lo)
#check class of num1
class(num1)
#check class of cha
class(cha)
#check class of cha
class(cha)
#check class of lo
class(lo)
#check class of num1
class(num1)
#check class of cha1
class(cha1)
#check class of lo
class(lo)
vec1 <- c(2, 3, 5)
vec2 <- c(T, F, TRUE)
vec3 <- c("a", NA, "etcetra")
vec1 # to view what is in vec1
vec2 # to view what is in vec2
vec3 # to view what is in vec3
namesvector <- c("name1", "name2", "name3")
names(vec1) <- namesvector
print(vec1)
namesvector <- c("name1", "name2", "name3")
namesvector <- c("name1", "name2", "name3")
names(vec1) <- namesvector
print(vec1)
vec4 <- c(1,8,9,10)
vec5 <- c(4,6,8,1)
vec4 + vec5
vec4 * 5
sum(vec4, vec5)
log(vec4) # can you check what logarithm is taken from vec4? (go to help file to see what base is standard used in the function log)
vec4 / vec5
mean(vec4)
vec6 <- vec5 / vec4
vec6
vec6 <- vec4 + vec5
vec6 # here you overwrite the data in vec6 (i.e. vec5/vec4) with new data (i.a. vec4+vec5)
vec7 = c(10, 20, 30)
vec8 = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
vec7 + vec8
vec9 <- c(5, 10, 25)
length(vec9)
max(vec9)
min(vec9)
summary(vec9)
vec10 <- c(1, 2, 3, 4, 5, 9, 10, 1, NA)
vec10 <- c(1, 2, 3, 4, 5, 9, 10, 1, NA)
vec10[3] # retrieve third component in vector
vec10[c(1, 5, 8)] # retrieve first, fifth and eight component in the vector
vec10[-3] # retrieve the components in the vector without the third element
vec10 <- c(1, 2, 3, 4, 5, 9, 10, 1, NA)
vec10[3] # retrieve third component in vector
vec10[c(1, 5, 8)] # retrieve first, fifth and eight component in the vector
vec10[-3] # retrieve the components in the vector without the third element
vec10 <- c(1, 2, 3, 4, 5, 9, 10, 1, NA)
vec10[3] # retrieve third component in vector
vec10[c(1, 5, 8)] # retrieve first, fifth and eight component in the vector
vec10[-3] # retrieve the components in the vector without the third element
vec10[0]
vec10 <- c(1, 2, 3, 4, 5, 9, 10, 1, NA)
lo_vec <- c(T, F, T, F, F, T, T, T, F)
vec10[lo_vec] #only the values of vec10 with a corresponding T=TRUE in l are retrieved
v <- (1, 4, 8, 3, 9, 7, 10)
length(v)
summary(v)
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
summary(v)
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
summary(v) [mean]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
"length of v" <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
"length of v" <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
"length of v" <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
print (length_of_v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
print ("length_of_v" length_of_v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
print (length_of_v) "length_of_v"
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
print (length_of_v) +"length_of_v"
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length_of_v <- length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
summary(v) [4]
v[4]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
mean(v)
fourth_element_index <- 4
fourth_element <- v[fourth_element_index]
fourth_element_logical <- v == 3
fourth_element <- v[fourth_element_logical]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
mean(v)
fourth_element_index <- 4
fourth_element <- v[fourth_element_index]
fourth_element_logical <- v == 3
fourth_element <- v[fourth_element_logical]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
mean(v)
#Using index position (R uses 1-based indexing):
fourth_element_index <- 4
fourth_element <- v[fourth_element_index]
#Using a logical vector (assuming you want to check if it's equal to a specific value, like 3):
fourth_element_logical <- v == 3
fourth_element <- v[fourth_element_logical]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
mean(v)
#Using index position (R uses 1-based indexing):
fourth_element_index <- 4
fourth_element <- v[fourth_element_index]
#Using a logical vector (assuming you want to check if it's equal to a specific value, like 3):
#fourth_element_logical <- v == 3
#fourth_element <- v[fourth_element_logical]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
mean(v)
#Using index position (R uses 1-based indexing):
fourth_element_index <- 4
#fourth_element <- v[fourth_element_index]
#Using a logical vector (assuming you want to check if it's equal to a specific value, like 3):
#fourth_element_logical <- v == 3
#fourth_element <- v[fourth_element_logical]
v <- c(1, 4, 8, 3, 9, 7, 10)
length(v)
summary(v) [4]
v[4]
cha <- c('a', 'b', 'c', 'a', 'a', 'c', 'b', 'a')
print(cha)
fac <- factor(cha)
print(fac)
fac <- factor(cha)
print(fac)
levels(fac) # with function levels you can retrieve the different categories in the factor; a factor is interesting to be used for categorical variables
summary(fac)
num <- c(1, 4, 9)
print(num)
cha <- as.character(num)
print(cha)
cha <- c("1", "4", "10" ,"A") # the numbers in this vector are not interpreted as numbers but as characters
print(cha)
num <- as.numeric(cha)#a letter cannot be converted to a number --> warning (not error) message but the command is exerted!
print(num) # in this vector the numbers are interpreted as numbers (not anymore between quotation marks)
M1 = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
print(M1)                     # print the matrix
M2 = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = FALSE)       # fill matrix by columns
print(M2)                     # print the matrix
dim(M1)
#summary(M1)
#dim(M1)
summary(M1)
#dim(M1)
?summary(M1)
dim(M1)
summary(M1)
dim(M1)
#summary(M1)
rownames(M1) <- c("patient1", "patient2")
colnames(M1) <- c("gene1", "gene2", "gene3")
print(M1)
M1[2, 3]
M1[1, ]
M1[ ,3]
selected_columns <- M1[, c(1, 3)]
selected_columns <- M1[, c(1, 3)]
selected_columns <- M1[, c(1, 3)]
# selected_columns will be a matrix containing the 1st and 3rd columns
#      [,1] [,2]
# [1,]    1    5
# [2,]    2    6
M1["patient1", "gene1"] # here we ask for the value of gene1 in patient1
###Create the matrix M with row names (genes) and column names (samples):###
# Create the matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = TRUE,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Print the matrix
M
###Check the expression of gene2 in Sample3 by indexing:###
expression_gene2_sample3 <- M["gene2", "Sample3"]
# expression_gene2_sample3 will be 7
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
# elements_second_row will be a vector with the expression values of gene2 in all samples
# Sample1 Sample2 Sample3
#      8       5       7
###Calculate the mean of the elements in the second column (Sample2):###
mean_second_column <- mean(M[, "Sample2"])
# mean_second_column will be the mean expression value in Sample2
# mean_second_column = (8 + 5 + 7) / 3 = 6.67 (rounded to two decimal places)
###Create the matrix M with row names (genes) and column names (samples):###
# Create the matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2),
nrow = 4,
byrow = TRUE,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Print the matrix
M
###Check the expression of gene2 in Sample3 by indexing:###
expression_gene2_sample3 <- M["gene2", "Sample3"]
# expression_gene2_sample3 will be 7
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
# elements_second_row will be a vector with the expression values of gene2 in all samples
# Sample1 Sample2 Sample3
#      8       5       7
###Calculate the mean of the elements in the second column (Sample2):###
mean_second_column <- mean(M[, "Sample2"])
# mean_second_column will be the mean expression value in Sample2
# mean_second_column = (8 + 5 + 7) / 3 = 6.67 (rounded to two decimal places)
###Create the matrix M with row names (genes) and column names (samples):###
# Create the matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2),
nrow = 4,
byrow = TRUE,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3"))
)
# Print the matrix
M
###Check the expression of gene2 in Sample3 by indexing:###
expression_gene2_sample3 <- M["gene2", "Sample3"]
# expression_gene2_sample3 will be 7
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
# elements_second_row will be a vector with the expression values of gene2 in all samples
# Sample1 Sample2 Sample3
#      8       5       7
###Calculate the mean of the elements in the second column (Sample2):###
mean_second_column <- mean(M[, "Sample2"])
# mean_second_column will be the mean expression value in Sample2
# mean_second_column = (8 + 5 + 7) / 3 = 6.67 (rounded to two decimal places)
# Print the matrix
M
expression_gene2_sample3 <- M["gene2", "Sample3"]
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
###Calculate the mean of the elements in the second column (Sample2):###
mean_second_column <- mean(M[, "Sample2"])
###Create the matrix M with row names (genes) and column names (samples):###
# Create the matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2),
nrow = 4,
byrow = TRUE,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3"))
)
# Print the matrix
M
###Check the expression of gene2 in Sample3 by indexing:###
expression_gene2_sample3 <- M["gene2", "Sample3"]
expression_gene2_sample3
# expression_gene2_sample3 will be 7
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
elements_second_row
# elements_second_row will be a vector with the expression values of gene2 in all samples
# Sample1 Sample2 Sample3
#      8       5       7
###Calculate the mean of the elements in the second column (Sample2):###
mean_second_column <- mean(M[, "Sample2"])
mean_second_column
# mean_second_column will be the mean expression value in Sample2
# mean_second_column = (8 + 5 + 7) / 3 = 6.67 (rounded to two decimal places)
###Create the matrix M with row names (genes) and column names (samples):###
# Create the matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = TRUE,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Print the matrix
M
###Check the expression of gene2 in Sample3 by indexing:###
expression_gene2_sample3 <- M["gene2", "Sample3"]
# expression_gene2_sample3 will be 7
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
# elements_second_row will be a vector with the expression values of gene2 in all samples
# Sample1 Sample2 Sample3
#      8       5       7
###Calculate the mean of the elements in the second column (Sample2):###
num <- c(2, 3, 5)
cha <- c("aa", "bb", "cc")
lo <- c(TRUE, FALSE, TRUE)
df <- data.frame(num, cha, lo)       # df is a data frame
df # the columns of this data-frame gets automatically the names of the vectors used to construct this data-frame
df <- data.frame(col1 = num, col2 = cha, col3 = lo) # you can also use this command and then the column names will be col1, col2 and col3
df
df[1,2] # as with matrices
df[1, ] # as with matrices
df[ ,2]# as with matrices
df[c(T, T, F), ]# as with matrices
df["col1"] # the output is a new dataframe of only the values in column with name col1
df[[3]] # third column (output is a vector, only the values are retrieved)
df[["col3"]] # same output as previous command
###Create the matrix M with row names (genes) and column names (samples):###
# Create the matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = F,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Print the matrix
M
###Check the expression of gene2 in Sample3 by indexing:###
expression_gene2_sample3 <- M["gene2", "Sample3"]
# expression_gene2_sample3 will be 7
###Extract the elements from the second row:###
elements_second_row <- M["gene2", ]
# elements_second_row will be a vector with the expression values of gene2 in all samples
# Sample1 Sample2 Sample3
#      8       5       7
###Calculate the mean of the elements in the second column (Sample2):###
###Create a data frame D with vector v and an additional character column:###
# Create vector v
v <- c(1, 4, 8, 3, 9, 7, 10)
# Create a character vector
colors <- c("red", "blue", "green", "grey", "orange", "purple", "brown")
# Create the data frame D
D <- data.frame(v, colors)
# Print the data frame D
print(D)
###Create a data frame DF with matrix M and an additional character column:###
# Create a matrix M (assuming you have it from the previous exercise)
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = F,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Create a character vector
letters <- c("A", "B", "C", "D")
# Create the data frame DF
DF <- data.frame(M, letters)
# Print the data frame DF
print(DF)
M_num <- matrix(c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow=4, ncol=3, byrow=F)
M_num
M_cha <- matrix(c('name1', 'name2', 'name3', 'name4', 10, 5, 12, 2, 7, 7, 9, 2), nrow=4, ncol=3, byrow=F)
M_cha
cha <- c('name1', 'name2', 'name3', 'name4')
num1 <- c(10, 5, 12, 2)
num2 <- c(7, 7, 9, 2)
df <- data.frame(cha, num1, num2)
df
M2 <- matrix(c(1:50), 10, 5) # a matrix
vec <- c(60, 9, 100, 303, 50000, NA) # a numerical vector
fac <- factor(c("A", "A", "B", "A", "B", "A")) # a factor with 2 levels
l <- list(
expression_data = M2,
measurements = vec,
classes = fac
)
l
l[[3]]  #(3th component of the list)
l$classes #(give component with the name “classes”)
l[[3]][2] #(give second element of 3th component of the list)
###Create a list L including the matrix M and the vector v:###
# Create vector v
v <- c(1, 4, 8, 3, 9, 7, 10)
# Create a matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = F,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Create the list L
L <- list(M, v)
###Create a list L including the matrix M and the vector v:###
# Create vector v
v <- c(1, 4, 8, 3, 9, 7, 10)
# Create a matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = F,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Create the list L
L <- list(M, v)
###Create a list L including the matrix M and the vector v:###
# Create vector v
v <- c(1, 4, 8, 3, 9, 7, 10)
# Create a matrix M
M <- matrix(data = c(4, 8, 9, 4, 10, 5, 12, 2, 7, 7, 9, 2), nrow = 4, byrow = F,
dimnames = list(c("gene1", "gene2", "gene3", "gene4"),
c("Sample1", "Sample2", "Sample3")))
# Create the list L
L <- list(M, v)
###Give the second component in the list L (which is the vector v):###
second_component <- L[[2]]
# second_component will be the vector v
####Give the second row in the first component in the list L (which is the matrix M):###
second_row_in_first_component <- L[[1]][2, ]
# second_row_in_first_component will be the second row of the matrix M
#Run this line. It will give an error message, as R cannot interpret this. It is not indicated to be a comment.
vec4 <- c(2, 3, 5, abdo)
vec4 <- c(2, 3, 5, "abdo")
vec4 <- c(2, 3, 5, "abdo")
vec4
namesvector <- c("name1", "name2", "name3")
names(vec1) <- namesvector
print(vec1)
vec7 = c(10, 20, 30)
vec8 = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
vec7 + vec8
vec10 <- c(1, 2, 3, 4, 5, 9, 10, 1, NA)
lo_vec <- c(T, F, T, F, F, T, T, T, F)
vec10[lo_vec] #only the values of vec10 with a corresponding T=TRUE in l are retrieved
cha <- c('a', 'b', 'c', 'a', 'a', 'c', 'b', 'a')
print(cha)
fac <- factor(cha)
print(fac)
cha <- c('a', 'b', 'c', 'a', 'a', 'c', 'b', 'a')
print(cha)
fac <- factor(cha)
print(fac)
