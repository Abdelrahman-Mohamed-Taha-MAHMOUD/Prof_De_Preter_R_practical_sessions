clustering_distance_columns = "manhattan", clustering_method_columns = "ward.D2",
row_title = "normalised gene expression", column_title = "patient",
show_row_dend = TRUE,
show_column_dend = TRUE,
top_annotation = column_ha)
### Differential expression analysis
dds <- DESeq(dds)
### Retrieve results (with standard settings, i.e. alpha=0.1)
res <- results(dds)
summary(res)
?results()
## here we select the genes with a padj value lower than 0.05 and a log2foldchange of more than 1
res <- results(dds, alpha=0.05, lfcThreshold = 1)
summary(res)
## here we sort the resultstable based on the adjusted p-value (from small to large), you can compare the objects res and resOrdered
resOrdered <- res[order(res$padj),]
resOrdered
### We first select only the data from the top 1000 differentially expressed genes (compare the heatmap and clustering using the random selection of 1000 genes (see higher))
select_normalized_counts <- normalized_counts[rownames(res)[1:1000],]
colors_tissuetype <- c("#8DD3C7", "#FFFFB3")
names(colors_tissuetype) <- c("normal","tumor")
column_ha = HeatmapAnnotation(tissuetype = as.factor(AnnotationTable$Conditions), col = list(tissuetype=colors_tissuetype))
## A heatmap with hierarchical clustering including dendrogram (distance = Manhattan and clustering method = ward.D2)
dataforheatmap=scale(as.matrix(select_normalized_counts))
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = TRUE, cluster_columns = TRUE,
clustering_distance_rows = "manhattan", clustering_method_rows = "ward.D2",
clustering_distance_columns = "manhattan", clustering_method_columns = "ward.D2",
row_title = "normalised gene expression", column_title = "patient",
show_row_dend = TRUE,
show_column_dend = TRUE,
top_annotation = column_ha)
plotMA(res,ylim=c(-25,28),alpha=0.05)
plotCounts(dds, gene=which.min(res$padj), intgroup="Conditions")
## alternative: top most differentia expressed gene
plotCounts(dds, gene=rownames(resOrdered[1,]), intgroup="Conditions")
## second most differential
plotCounts(dds, gene=rownames(resOrdered[2,]), intgroup="Conditions")
### the ggplot solution
as.data.frame(res) %>%
ggplot(aes(x=log2FoldChange,y=-log10(padj))) +
geom_point()
### the enhanced volcanoplot solution
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
### Hallmark
H <- as.data.frame(msigdbr(species = "Homo sapiens",
category = "H"))
H.ensembl.ls <- H %>%
#Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
#Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
#Convert to list
deframe()
results_df <- as.data.frame(res) %>%
#Move gene IDs from rownames to a column
rownames_to_column("ensembl_gene_id")
results_df_fcordered <- results_df %>% arrange(-log2FoldChange)
#Vector of mean fold change values
FC.vec <- results_df_fcordered$log2FoldChange
#Add gene annotation/names
#Importantly, since both columns come from the same data frame,
#we are confident that they are in the same order
names(FC.vec) <- results_df_fcordered$ensembl_gene_id
gsea.H <- as.data.frame(fgseaSimple(pathways = H.ensembl.ls,
stats = FC.vec,
nperm = 4000,
scoreType = "std"))
class(gsea.H)
colnames(gsea.H)
gsea.H %>%
filter(padj <= 0.05) %>%
#Beautify descriptions by removing _ and HALLMARK
mutate(pathway = gsub("HALLMARK_","", pathway),
pathway = gsub("_"," ", pathway)) %>%
ggplot(aes(x=reorder(pathway, NES), #Reorder gene sets by NES values
y=NES)) +
geom_col() +
theme_classic() +
#Force equal max min
#Some more customization to pretty it up
#Flip x and y so long labels can be read
coord_flip() +
#fix labels
labs(y="Normalized enrichment score (NES)",
x="Gene set",
title = "Hallmark GSEA (FDR < 0.05)\nDown in normal <--         --> Up in tumor")
topPathwaysUp <- gsea.H %>% arrange(NES) %>% top_n(10, NES) %>% select(pathway)
topPathwaysDown <- gsea.H %>% arrange(-NES) %>% top_n(10, -NES) %>% select(pathway)
topPathways <- c(topPathwaysUp$pathway, topPathwaysDown$pathway)
plotGseaTable(H.ensembl.ls[topPathways], FC.vec, gsea.H, render=TRUE)
plotEnrichment(H.ensembl.ls[["HALLMARK_MYOGENESIS"]],
FC.vec) + labs(title="HALLMARK_MYOGENESIS")
plotEnrichment(H.ensembl.ls[["HALLMARK_MYOGENESIS"]],
FC.vec) + labs(title="HALLMARK_MYOGENESIS")
#### Load libraries
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
## DESeq2 for differential expression analysis
#BiocManager::install("DESeq2")
library("DESeq2")
## Heatmaps for visualization purposes
#BiocManager::install("pheatmap")
library("pheatmap")
## BiocManager::install("ComplexHeatmap")
library("ComplexHeatmap")
## Packages that could be used for nice color themes
#install.packages("RColorBrewer")
library("RColorBrewer")
## Tidyverse will be used to shape the data
#install.packages("tidyverse")
library("tidyverse")
## VSN is used for transformation purposes
#BiocManager::install("vsn")
library("vsn")
## Easy to use package to make good looking Volcano plots
#BiocManager::install("EnhancedVolcano")
library("EnhancedVolcano")
## For gene set enrichment analysis
#BiocManager::install("msigdbr")
library("msigdbr")
#BiocManager::install("clusterProfiler")
library(clusterProfiler)
#BiocManager::install("fgsea")
library(fgsea)
### Import data and make CountTable
readr::local_edition(1) # this is a line that I need to run to avoid an error on vroom on my mac
RNAseq_data <- read_tsv("GSE193775_Readcounts.txt") %>% column_to_rownames("Gene")
#### Load libraries
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
## DESeq2 for differential expression analysis
#BiocManager::install("DESeq2")
library("DESeq2")
## Heatmaps for visualization purposes
#BiocManager::install("pheatmap")
library("pheatmap")
## BiocManager::install("ComplexHeatmap")
library("ComplexHeatmap")
## Packages that could be used for nice color themes
#install.packages("RColorBrewer")
library("RColorBrewer")
## Tidyverse will be used to shape the data
#install.packages("tidyverse")
library("tidyverse")
## VSN is used for transformation purposes
#BiocManager::install("vsn")
library("vsn")
## Easy to use package to make good looking Volcano plots
#BiocManager::install("EnhancedVolcano")
library("EnhancedVolcano")
## For gene set enrichment analysis
#BiocManager::install("msigdbr")
library("msigdbr")
#BiocManager::install("clusterProfiler")
library(clusterProfiler)
#BiocManager::install("fgsea")
library(fgsea)
### Import data and make CountTable
readr::local_edition(1) # this is a line that I need to run to avoid an error on vroom on my mac
RNAseq_data <- read_tsv("GSE193775_Readcounts.txt") %>% column_to_rownames("Gene")
AnnotationTable <- read_tsv("GSE193775_sampleinfo.txt") %>% column_to_rownames("SampleID")
### Make a dds object, including the design of the DE experiment
dds <- DESeqDataSetFromMatrix(countData = RNAseq_data,
colData = AnnotationTable,
design = ~treatment)
### Prefilter the data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
normdata <- estimateSizeFactors(dds)
### with the function sizeFactors you can calculate the normalization factor used to normalize the raw counts and get normalized counts.
sizeFactors(normdata)
### Here we transform the normalized counts with 2log. As (normalized) counts can be zero, we first add 1, so that for all normalized counts a log-transformation can be performed (as log2(0)=-Inf). An alternative is to use rlog (regularized log).
normalized_counts <- log2(counts(normdata, normalized=TRUE)+1)
### prcomp is the function used to calculate the prinicple components (scale = TRUE is to perform PCA on standardized data). By performing prcomp on the transposed data, principle componennt analysis is performed at the sample level (instead of at the genelevel). pca$x is a matrix and data need to be converted to a tibble or dataframe for ggplot analysis. The samples are coulored according to their treatment (Control or YAP1mut).
pca=prcomp(t(normalized_counts), scale=TRUE)
pca$x %>% as.data.frame() %>%
ggplot(aes(x=PC1,y=PC2,color=AnnotationTable$treatment)) +
geom_point()
### We first select only the data from the top 1000 genes (heatmap visualization on all genes will be too computer intensive)
select_normalized_counts <- as.data.frame(normalized_counts) %>%
sample_n(1000)
colors_treatmenttype <- c("#8DD3C7", "#FFFFB3")
names(colors_treatmenttype) <- c("Control","YAP1mut")
column_ha = HeatmapAnnotation(treatmenttype = as.factor(AnnotationTable$treatment), col = list(treatmenttype=colors_treatmenttype))
## First option: just a heatmap without hierarchical clustering (check all arguments in this function). Data are first standardized using the scale function.
dataforheatmap=t(scale(t(as.matrix(select_normalized_counts))))
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = FALSE, cluster_columns = FALSE,
row_title = "normalised gene expression", column_title = "cell line",
show_row_dend = FALSE,
show_column_dend = FALSE,
top_annotation = column_ha)
## Second option: a heatmap including hierarchical clustering visualised with a dendrogram (distance = Manhattan and clustering method = ward.D2)
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = TRUE, cluster_columns = TRUE,
clustering_distance_rows = "euclidean", clustering_method_rows = "ward.D2",
clustering_distance_columns = "euclidean", clustering_method_columns = "ward.D2",
row_title = "normalised gene expression", column_title = "cell line",
show_row_dend = TRUE,
show_column_dend = TRUE,
top_annotation = column_ha)
### Differential expression analysis
dds <- DESeq(dds)
### Retrieve results (with standard settings, i.e. alpha=0.1)
res <- results(dds)
summary(res)
?results()
## here we select the genes with a padj value lower than 0.01 and a log2foldchange of more than 1
res <- results(dds, alpha=0.01, lfcThreshold = 1)
summary(res)
## here we sort the resultstable based on the adjusted p-value (from small to large), you can compare the objects res and resOrdered
resOrdered <- res[order(res$padj),]
resOrdered
### We first select only the data from the top 50 differentially expressed genes (compare the heatmap and clustering using the random selection of 50 genes (see higher))
select_normalized_counts <- normalized_counts[rownames(resOrdered)[1:50],]
colors_treatmenttype <- c("#8DD3C7", "#FFFFB3")
names(colors_treatmenttype) <- c("Control","YAP1mut")
column_ha = HeatmapAnnotation(treatmenttype = as.factor(AnnotationTable$treatment), col = list(treatmenttype=colors_treatmenttype))
## A heatmap with hierarchical clustering including dendrogram (distance = Manhattan and clustering method = ward.D2)
dataforheatmap=t(scale(t(as.matrix(select_normalized_counts))))
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = TRUE, cluster_columns = TRUE,
clustering_distance_rows = "manhattan", clustering_method_rows = "ward.D2",
clustering_distance_columns = "manhattan", clustering_method_columns = "ward.D2",
row_title = "normalised gene expression", column_title = "cell line",
show_row_dend = TRUE,
show_column_dend = TRUE,
top_annotation = column_ha)
plotMA(res,ylim=c(-25,28),alpha=0.05)
plotCounts(dds, gene=which.min(res$padj), intgroup="treatment")
## alternative: top most differentia expressed gene
plotCounts(dds, gene=rownames(resOrdered[1,]), intgroup="treatment")
## second most differential
plotCounts(dds, gene=rownames(resOrdered[2,]), intgroup="treatment")
## third most differential
plotCounts(dds, gene=rownames(resOrdered[3,]), intgroup="treatment")
### the ggplot solution
as.data.frame(res) %>%
ggplot(aes(x=log2FoldChange,y=-log10(padj))) +
geom_point()
### the enhanced volcanoplot solution
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
### Hallmark
H <- as.data.frame(msigdbr(species = "Homo sapiens",
category = "H"))
H.ensembl.ls <- H %>%
#Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
#Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
#Convert to list
deframe()
results_df <- as.data.frame(res) %>%
#Move gene IDs from rownames to a column
rownames_to_column("ensembl_gene_id")
results_df_fcordered <- results_df %>% arrange(-log2FoldChange)
#Vector of mean fold change values
FC.vec <- results_df_fcordered$log2FoldChange
#Add gene annotation/names
#Importantly, since both columns come from the same data frame,
#we are confident that they are in the same order
names(FC.vec) <- results_df_fcordered$ensembl_gene_id
gsea.H <- as.data.frame(fgseaSimple(pathways = H.ensembl.ls,
stats = FC.vec,
nperm = 4000,
scoreType = "std"))
class(gsea.H)
colnames(gsea.H)
gsea.H %>%
filter(padj <= 0.05) %>%
ggplot(aes(x=reorder(pathway, NES), #Reorder gene sets by NES values
y=NES)) +
geom_col() +
theme_classic() +
#Force equal max min
#Some more customization to pretty it up
#Flip x and y so long labels can be read
coord_flip() +
#fix labels
labs(y="Normalized enrichment score (NES)",
x="Gene set",
title = "Hallmark GSEA (FDR < 0.05)\nUp in control <--         --> Up in YAP1mut")
topPathwaysUp <- gsea.H %>% arrange(NES) %>% top_n(10, NES) %>% select(pathway)
topPathwaysDown <- gsea.H %>% arrange(-NES) %>% top_n(10, -NES) %>% select(pathway)
topPathways <- c(topPathwaysUp$pathway, topPathwaysDown$pathway)
plotGseaTable(H.ensembl.ls[topPathways], FC.vec, gsea.H, render=TRUE)
plotEnrichment(H.ensembl.ls[["HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION"]],
FC.vec) + labs(title="HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION")
plotEnrichment(H.ensembl.ls[["HALLMARK_ANGIOGENESIS"]],
FC.vec) + labs(title="HALLMARK_ANGIOGENESIS")
#### Load libraries
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
## DESeq2 for differential expression analysis
#BiocManager::install("DESeq2")
library("DESeq2")
## Heatmaps for visualization purposes
#BiocManager::install("pheatmap")
library("pheatmap")
## BiocManager::install("ComplexHeatmap")
library("ComplexHeatmap")
## Packages that could be used for nice color themes
#install.packages("RColorBrewer")
library("RColorBrewer")
## Tidyverse will be used to shape the data
#install.packages("tidyverse")
library("tidyverse")
## VSN is used for transformation purposes
#BiocManager::install("vsn")
library("vsn")
## Easy to use package to make good looking Volcano plots
#BiocManager::install("EnhancedVolcano")
library("EnhancedVolcano")
## For gene set enrichment analysis
#BiocManager::install("msigdbr")
library("msigdbr")
#BiocManager::install("clusterProfiler")
library(clusterProfiler)
#BiocManager::install("fgsea")
library(fgsea)
### Import data and make CountTable
readr::local_edition(1) # this is a line that I need to run to avoid an error on vroom on my mac
RNAseq_data <- read_tsv("GSE202744_count-matrix.tsv") %>% column_to_rownames("gene")
AnnotationTable <- read_tsv("SampleInfo_GSE202744.txt") %>% column_to_rownames("SampleID")
### Make a dds object, including the design of the DE experiment
dds <- DESeqDataSetFromMatrix(countData = RNAseq_data,
colData = AnnotationTable,
design = ~Treatment)
### Prefilter the data
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
normdata <- estimateSizeFactors(dds)
### with the function sizeFactors you can calculate the normalization factor used to normalize the raw counts and get normalized counts.
sizeFactors(normdata)
### Here we transform the normalized counts with 2log. As (normalized) counts can be zero, we first add 1, so that for all normalized counts a log-transformation can be performed (as log2(0)=-Inf). An alternative is to use rlog (regularized log).
normalized_counts <- log2(counts(normdata, normalized=TRUE)+1)
### prcomp is the function used to calculate the prinicple components (scale = TRUE is to perform PCA on standardized data). By performing prcomp on the transposed data, principle component analysis is performed at the sample level (instead of at the genelevel). pca$x is a matrix and data need to be converted to a tibble or dataframe for ggplot analysis. The samples are coulored according to their treatment (Control or YAP1mut).
pca=prcomp(t(normalized_counts), scale=TRUE)
pca$x %>% as.data.frame() %>%
ggplot(aes(x=PC1,y=PC2,color=AnnotationTable$Treatment)) +
geom_point()
### We first select only the data from the top 1000 genes (heatmap visualization on all genes will be too computer intensive)
select_normalized_counts <- as.data.frame(normalized_counts) %>%
sample_n(1000)
colors_treatmenttype <- c("#8DD3C7", "#FFFFB3")
names(colors_treatmenttype) <- c("DMSO","toyocamycin")
column_ha = HeatmapAnnotation(treatmenttype = as.factor(AnnotationTable$Treatment), col = list(treatmenttype=colors_treatmenttype))
## First option: just a heatmap without hierarchical clustering (check all arguments in this function). Data are first standardized using the scale function.
dataforheatmap=scale(as.matrix(select_normalized_counts))
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = FALSE, cluster_columns = FALSE,
row_title = "normalised gene expression", column_title = "cell line",
show_row_dend = FALSE,
show_column_dend = FALSE,
top_annotation = column_ha)
## Second option: a heatmap including hierarchical clustering visualised with a dendrogram (distance = Manhattan and clustering method = ward.D2)
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = TRUE, cluster_columns = TRUE,
clustering_distance_rows = "manhattan", clustering_method_rows = "ward.D2",
clustering_distance_columns = "manhattan", clustering_method_columns = "ward.D2",
row_title = "normalised gene expression", column_title = "cell line",
show_row_dend = TRUE,
show_column_dend = TRUE,
top_annotation = column_ha)
### Differential expression analysis
dds <- DESeq(dds)
### Retrieve results (with standard settings, i.e. alpha=0.1)
res <- results(dds)
summary(res)
?results()
## here we select the genes with a padj value lower than 0.05 and a log2foldchange of more than 1
res <- results(dds, alpha=0.05, lfcThreshold = 1)
summary(res)
## here we sort the resultstable based on the adjusted p-value (from small to large), you can compare the objects res and resOrdered
resOrdered <- res[order(res$padj),]
resOrdered
### We first select only the data from the top 50 differentially expressed genes (compare the heatmap and clustering using the random selection of 50 genes (see higher))
select_normalized_counts <- normalized_counts[rownames(resOrdered)[1:50],]
colors_treatmenttype <- c("#8DD3C7", "#FFFFB3")
names(colors_treatmenttype) <- c("DMSO","toyocamycin")
column_ha = HeatmapAnnotation(treatmenttype = as.factor(AnnotationTable$Treatment), col = list(treatmenttype=colors_treatmenttype))
## A heatmap with hierarchical clustering including dendrogram (distance = Manhattan and clustering method = ward.D2)
dataforheatmap=scale(as.matrix(select_normalized_counts))
Heatmap(dataforheatmap,
show_row_names = FALSE, show_column_names = TRUE,
cluster_rows = TRUE, cluster_columns = TRUE,
clustering_distance_rows = "manhattan", clustering_method_rows = "ward.D2",
clustering_distance_columns = "manhattan", clustering_method_columns = "ward.D2",
row_title = "normalised gene expression", column_title = "cell line",
show_row_dend = TRUE,
show_column_dend = TRUE,
top_annotation = column_ha)
plotMA(res,ylim=c(-25,28),alpha=0.05)
plotCounts(dds, gene=which.min(res$padj), intgroup="Treatment")
## alternative: top most differentia expressed gene
plotCounts(dds, gene=rownames(resOrdered[1,]), intgroup="Treatment")
## second most differential
plotCounts(dds, gene=rownames(resOrdered[2,]), intgroup="Treatment")
### the ggplot solution
as.data.frame(res) %>%
ggplot(aes(x=log2FoldChange,y=-log10(padj))) +
geom_point()
### the enhanced volcanoplot solution
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
### Hallmark
H <- as.data.frame(msigdbr(species = "Homo sapiens",
category = "H"))
H.ensembl.ls <- H %>%
#Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
#Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
#Convert to list
deframe()
### Hallmark
ONCO <- as.data.frame(msigdbr(species = "Homo sapiens",
category = "C6"))
ONCO.ensembl.ls <- ONCO %>%
#Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
#Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
#Convert to list
deframe()
results_df <- as.data.frame(res) %>%
#Move gene IDs from rownames to a column
rownames_to_column("ensembl_gene_id")
results_df_fcordered <- results_df %>% arrange(-log2FoldChange)
#Vector of mean fold change values
FC.vec <- results_df_fcordered$log2FoldChange
#Add gene annotation/names
#Importantly, since both columns come from the same data frame,
#we are confident that they are in the same order
names(FC.vec) <- results_df_fcordered$ensembl_gene_id
gsea.H <- as.data.frame(fgseaSimple(pathways = H.ensembl.ls,
stats = FC.vec,
nperm = 4000,
scoreType = "std"))
gsea.ONCO <- as.data.frame(fgseaSimple(pathways = ONCO.ensembl.ls,
stats = FC.vec,
nperm = 4000,
scoreType = "std"))
class(gsea.H)
colnames(gsea.H)
gsea.H %>%
filter(padj <= 0.05) %>%
ggplot(aes(x=reorder(pathway, NES), #Reorder gene sets by NES values
y=NES)) +
geom_col() +
theme_classic() +
#Force equal max min
#Some more customization to pretty it up
#Flip x and y so long labels can be read
coord_flip() +
#fix labels
labs(y="Normalized enrichment score (NES)",
x="Gene set",
title = "Hallmark GSEA (FDR < 0.05)\nUp in control <--         --> Up in treatment")
topPathwaysUp <- gsea.H %>% arrange(NES) %>% top_n(10, NES) %>% select(pathway)
topPathwaysDown <- gsea.H %>% arrange(-NES) %>% top_n(10, -NES) %>% select(pathway)
topPathways <- c(topPathwaysUp$pathway, topPathwaysDown$pathway)
plotGseaTable(H.ensembl.ls[topPathways], FC.vec, gsea.H, render=TRUE)
plotEnrichment(H.ensembl.ls[["HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION"]],
FC.vec) + labs(title="HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION")
plotEnrichment(H.ensembl.ls[["HALLMARK_ANGIOGENESIS"]],
FC.vec) + labs(title="HALLMARK_ANGIOGENESIS")
plotEnrichment(H.ensembl.ls[["HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION"]],
FC.vec) + labs(title="HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION")
plotEnrichment(H.ensembl.ls[["HALLMARK_ANGIOGENESIS"]],
FC.vec) + labs(title="HALLMARK_ANGIOGENESIS")
gsea.ONCO %>%
filter(padj <= 0.01) %>%
ggplot(aes(x=reorder(pathway, NES), #Reorder gene sets by NES values
y=NES)) +
geom_col() +
theme_classic() +
#Force equal max min
#Some more customization to pretty it up
#Flip x and y so long labels can be read
coord_flip() +
#fix labels
labs(y="Normalized enrichment score (NES)",
x="Gene set",
title = "Oncogenic signature C6 GSEA (FDR < 0.01)\nUp in control <--         --> Up in treatment")
topPathwaysUp <- gsea.ONCO %>% arrange(NES) %>% top_n(10, NES) %>% select(pathway)
topPathwaysDown <- gsea.ONCO %>% arrange(-NES) %>% top_n(10, -NES) %>% select(pathway)
topPathways <- c(topPathwaysUp$pathway, topPathwaysDown$pathway)
plotGseaTable(ONCO.ensembl.ls[topPathways], FC.vec, gsea.ONCO, render=TRUE)
plotEnrichment(ONCO.ensembl.ls[["KRAS.KIDNEY_UP.V1_DN"]],
FC.vec) + labs(title="KRAS.KIDNEY_UP.V1_DN")
plotEnrichment(ONCO.ensembl.ls[["CAHOY_NEURONAL"]],
FC.vec) + labs(title="CAHOY_NEURONAL")
